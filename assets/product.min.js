if (!customElements.get('variant-selects')) {

	/**
	 *  @class
	 *  @function VariantSelects
	 */
	class VariantSelects extends HTMLElement {
	  constructor() {
	    super();
	    this.addEventListener('change', this.onVariantChange);
	  }

	  onVariantChange() {
	    this.updateOptions();
	    this.updateMasterId();
	    this.toggleAddButton(true, '', false);
	    this.updatePickupAvailability();
	    this.removeErrorMessage();
	    this.updateVariantText();

	    if (!this.currentVariant) {
	      this.toggleAddButton(true, '', true);
	      this.setUnavailable();
	    } else {
	      this.updateMedia();
	      this.updateURL();
	      this.updateVariantInput();

	      this.renderProductInfo();
	      //this.updateShareUrl();
	    }
	  }

	  updateOptions() {
	    const fieldsets = Array.from(this.querySelectorAll('fieldset'));
	    this.options = [];
	    fieldsets.forEach((fieldset, i) => {
	      if (fieldset.querySelector('select')) {
	        this.options.push(fieldset.querySelector('select').value);
	      } else if (fieldset.querySelectorAll('input').length) {
	        this.options.push(fieldset.querySelector('input:checked').value);
	      }
	    });
	  }
	  updateVariantText() {
	    const fieldsets = Array.from(this.querySelectorAll('fieldset'));
	    fieldsets.forEach((item, i) => {
	      let label = item.querySelector('.form__label__value');
	      if (label) {

	        label.innerHTML = this.options[i];
	      }
	    });
	  }
	  updateMasterId() {
	    this.currentVariant = this.getVariantData().find((variant) => {
	      return !variant.options.map((option, index) => {
	        return this.options[index] === option;
	      }).includes(false);
	    });
	  }

	  updateMedia() {
	    if (!this.currentVariant) return;
	    if (!this.currentVariant.featured_media) return;

			let productSlider = this.closest('.thb-product-detail').querySelector('.product-images');

	    if (!productSlider) {
	      productSlider = document.getElementById('Product-Quick-Slider');
	    }
	    this.setActiveMedia(`#Slide-${this.dataset.section}-${this.currentVariant.featured_media.id}`, productSlider);
	  }
	  setActiveMedia(mediaId, productSlider) {
	    var flkty = Flickity.data(productSlider);

	    if (flkty) {
	      flkty.selectCell(mediaId);
	    }

	  }

	  updateURL() {
	    if (!this.currentVariant || this.dataset.updateUrl === 'false') return;
	    window.history.replaceState({}, '', `${this.dataset.url}?variant=${this.currentVariant.id}`);
	  }

	  updateShareUrl() {
	    const shareButton = document.getElementById(`Share-${this.dataset.section}`);
	    if (!shareButton) return;
	    shareButton.updateUrl(`${window.shopUrl}${this.dataset.url}?variant=${this.currentVariant.id}`);
	  }

	  updateVariantInput() {
	    const productForms = document.querySelectorAll(`#product-form-${this.dataset.section}, #product-form-installment`);
	    productForms.forEach((productForm) => {
	      const input = productForm.querySelector('input[name="id"]');
	      input.value = this.currentVariant.id;
	      input.dispatchEvent(new Event('change', {
	        bubbles: true
	      }));
	    });
	  }

	  updatePickupAvailability() {
	    const pickUpAvailability = document.querySelector('.pickup-availability-wrapper');

	    if (!pickUpAvailability) return;

	    if (this.currentVariant && this.currentVariant.available) {
	      pickUpAvailability.fetchAvailability(this.currentVariant.id);
	    } else {
	      pickUpAvailability.removeAttribute('available');
	      pickUpAvailability.innerHTML = '';
	    }
	  }

	  removeErrorMessage() {
	    const section = this.closest('section');
	    if (!section) return;

	    const productForm = section.querySelector('product-form');
	    if (productForm) productForm.handleErrorMessage();
	  }

	  renderProductInfo() {
	    fetch(`${this.dataset.url}?variant=${this.currentVariant.id}&section_id=${this.dataset.section}`)
	      .then((response) => response.text())
	      .then((responseText) => {
	        const id = `price-${this.dataset.section}`;
	        const html = new DOMParser().parseFromString(responseText, 'text/html');
	        const destination = document.getElementById(id);
	        const source = html.getElementById(id);

	        if (source && destination) destination.innerHTML = source.innerHTML;

	        const price = document.getElementById(`price-${this.dataset.section}`);

	        if (price) price.classList.remove('visibility-hidden');
	        this.toggleAddButton(!this.currentVariant.available, window.theme.variantStrings.soldOut);
	      });
	  }

	  toggleAddButton(disable = true, text = false, modifyClass = true) {
	    const productForm = document.getElementById(`product-form-${this.dataset.section}`);
	    if (!productForm) return;
	    const addButton = productForm.querySelector('[name="add"]');
	    const addButtonText = productForm.querySelector('[name="add"] > span');

	    if (!addButton) return;

	    if (disable) {
	      addButton.setAttribute('disabled', 'disabled');
	      if (text) addButtonText.textContent = text;
	    } else {
	      addButton.removeAttribute('disabled');
	      addButton.classList.remove('loading');
	      addButtonText.textContent = window.theme.variantStrings.addToCart;
	    }

	    if (!modifyClass) return;
	  }

	  setUnavailable() {
	    const button = document.getElementById(`product-form-${this.dataset.section}`);
	    const addButton = button.querySelector('[name="add"]');
	    const addButtonText = button.querySelector('[name="add"] > span');
	    const price = document.getElementById(`price-${this.dataset.section}`);
	    if (!addButton) return;
	    addButtonText.textContent = window.theme.variantStrings.unavailable;
	    addButton.classList.add('sold-out');
	    if (price) price.classList.add('visibility-hidden');
	  }

	  getVariantData() {
	    this.variantData = this.variantData || JSON.parse(this.querySelector('[type="application/json"]').textContent);
	    return this.variantData;
	  }
	}
	customElements.define('variant-selects', VariantSelects);

	/**
	 *  @class
	 *  @function VariantRadios
	 */
	class VariantRadios extends VariantSelects {
	  constructor() {
	    super();
	  }

	  updateOptions() {
	    const fieldsets = Array.from(this.querySelectorAll('fieldset'));
	    this.options = fieldsets.map((fieldset) => {
	      return Array.from(fieldset.querySelectorAll('input')).find((radio) => radio.checked).value;
	    });
	  }
	  updateVariantText() {


	  }
	}

	customElements.define('variant-radios', VariantRadios);
}
if (!customElements.get('product-slider')) {
	/**
	 *  @class
	 *  @function ProductSlider
	 */
	class ProductSlider extends HTMLElement {
	  constructor() {
			super();

			this.addEventListener('change', this.setupProductGallery);
		}
		connectedCallback() {
			const _this = this;
			const product_container = this.closest('.thb-product-detail');
			const thumbnail_container = product_container.querySelector('.product-thumbnail-container');
			const prev_button = this.querySelector('.flickity-prev');
			const next_button = this.querySelector('.flickity-next');
			const thumbnails = thumbnail_container.querySelectorAll('.product-thumbnail');
			const flkty = new Flickity(this, {
				wrapAround: true,
				pageDots: true,
				contain: true,
				adaptiveHeight: true,
				initialIndex: '.is-initial-selected',
				prevNextButtons: false,
				fade: false,
				cellSelector: '.product-images__slide'
			});
			let selectedIndex = flkty.selectedIndex;
			if ( prev_button ) {
				prev_button.addEventListener('click', (event) => {
					flkty.previous();
				});
				prev_button.addEventListener('keyup', (event) => {
					flkty.previous();
					event.preventDefault();
				});
			}
			if ( next_button ) {
				next_button.addEventListener('click', (event) => {
					flkty.next();
				});
				next_button.addEventListener('keyup', (event) => {
					flkty.next();
					event.preventDefault();
				});
			}
			flkty.on('settle', function(index) {
				selectedIndex = index;
			});
			flkty.on('change', function(index) {
				let previous_slide = flkty.cells[selectedIndex].element,
						previous_media = previous_slide.querySelector('.product-single__media'),
						slide = flkty.cells[index].element,
						media = slide.querySelector('.product-single__media'),
						active_thumb = thumbnails[index];

				thumbnails.forEach((item, i) => {
					item.classList.remove('is-initial-selected');
				});
				active_thumb.classList.add('is-initial-selected');
				requestAnimationFrame(() => {
					if ( active_thumb.offsetParent === null ) {
						return;
					}
					const windowHalfHeight = active_thumb.offsetParent.clientHeight / 2,
								windowHalfWidth = active_thumb.offsetParent.clientWidth / 2;
					active_thumb.parentElement.scrollTo({
						left: 0,
						top: active_thumb.offsetTop - windowHalfHeight + active_thumb.clientHeight / 2,
						behavior: 'smooth'
					});
				});

				// Stop previous video
				if ( previous_media.classList.contains('product-single__media-external-video')) {
					if (previous_media.dataset.provider === 'youtube') {
						previous_media.querySelector('iframe').contentWindow.postMessage(JSON.stringify({ event: "command", func: "pauseVideo", args: "" }), "*");
					} else if (previous_media.dataset.provider === 'vimeo') {
						previous_media.querySelector('iframe').contentWindow.postMessage(JSON.stringify({ method: "pause" }), "*");
					}
				} else if ( previous_media.classList.contains('product-single__media-native-video') ) {
					previous_media.querySelector("video").pause();
				}

				// Draggable.
				if ( media.classList.contains('product-single__media-model')) {
					_this.setDraggable(flkty,false);
				} else {
					_this.setDraggable(flkty,true);
				}
			});

			thumbnails.forEach((thumbnail, index) => {
				thumbnail.addEventListener('click', function() {
					[].forEach.call(thumbnails, function(el) {
						el.classList.remove('is-initial-selected');
					});
					thumbnail.classList.add('is-initial-selected');
					flkty.select(index);
				});
			});


			// Start Gallery
			this.setupProductGallery();
		}
		setDraggable(flkty, draggable) {
			flkty.options.draggable = draggable;
			flkty.updateDraggable();
		}
		setupProductGallery() {
			if ( ! this.querySelectorAll('.product-single__media-zoom').length ) {
				return;
			}
			let activeImages = Array.from(this.querySelectorAll('.product-single__media-image'));


			this.setEventListeners(this, activeImages);
		}
		buildItems(activeImages) {
			let images = activeImages.map((item) => {
				let activelink = item.querySelector('.product-single__media-zoom');
				return {
				  src: activelink.getAttribute('href'),
				  msrc: activelink.dataset.msrc,
				  w: activelink.dataset.w,
				  h: activelink.dataset.h
				};
			});
			return images;
		}
		setEventListeners(container, activeImages) {
			let links = container.querySelectorAll('.product-single__media-zoom'),
					items = container.buildItems(activeImages),
					pswpElement = document.querySelectorAll('.pswp')[0],
					options = {
						maxSpreadZoom: 2,
						loop: false,
						allowPanToNext: false,
						closeOnScroll: false,
						showHideOpacity: false,
						arrowKeys: true,
						history: false,
						captionEl: false,
						fullscreenEl: false,
						zoomEl: false,
						shareEl: false,
						counterEl: false,
						arrowEl: true,
						preloaderEl: true,
						getThumbBoundsFn: () => {
		          const thumbnail = container.querySelector('.product-images__slide.is-selected'),
										pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
										rect = thumbnail.getBoundingClientRect();
		          return { x: rect.left, y: rect.top + pageYScroll, w: rect.width };
		        }
					};


			links.forEach((link => {
				link.addEventListener('click', (event) => {
					let i = link.dataset.index;
					options.index = parseInt(i, 10);

					if (typeof PhotoSwipe !== 'undefined') {
						let pswp = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
						pswp.listen('firstUpdate', function() {
							pswp.listen('parseVerticalMargin', function(item) {
								item.vGap = { top: 50, bottom: 50};
							});
						});
						pswp.init();
					}
					event.preventDefault();
				});
			}));

		}
	}
	customElements.define('product-slider', ProductSlider);
}

/**
 *  @class
 *  @function ProductForm
 */
if (!customElements.get('product-form')) {
  customElements.define('product-form', class ProductForm extends HTMLElement {
    constructor() {
      super();

      this.form = this.querySelector('form');
      this.form.querySelector('[name=id]').disabled = false;
      this.form.addEventListener('submit', this.onSubmitHandler.bind(this));
      this.cartNotification = document.querySelector('cart-notification');
      this.body = document.body;
    }

    onSubmitHandler(evt) {
      evt.preventDefault();
      const submitButton = this.querySelector('[type="submit"]');
      if (submitButton.classList.contains('loading')) return;

      this.handleErrorMessage();
      //this.cartNotification.setActiveElement(document.activeElement);

      submitButton.setAttribute('aria-disabled', true);
      submitButton.classList.add('loading');

      const config = {
        method: 'POST',
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Accept': 'application/javascript'
        }
      };
      const formData = new FormData(this.form);
      formData.append('sections', this.getSectionsToRender().map((section) => section.section));
      formData.append('sections_url', window.location.pathname);
      config.body = formData;

      fetch(`${theme.routes.cart_add_url}`, config)
        .then((response) => response.json())
        .then((response) => {
          if (response.status) {
            this.handleErrorMessage(response.description);
            return;
          }

          this.renderContents(response);
        })
        .catch((e) => {
          console.error(e);
        })
        .finally(() => {
          submitButton.classList.remove('loading');
          submitButton.removeAttribute('aria-disabled');
        });
    }

    getSectionsToRender() {
      return [{
	      id: 'Cart',
	      section: 'main-cart',
	      selector: '.thb-cart-form'
	    },
			{
        id: 'Cart-Drawer',
        section: 'cart-drawer',
        selector: '.cart-drawer'
      },
      {
        id: 'cart-drawer-toggle',
        section: 'cart-bubble',
        selector: '.thb-item-count'
      }];
    }
    renderContents(parsedState) {
      this.getSectionsToRender().forEach((section => {
				if ( ! document.getElementById(section.id) ) {
					return;
				}
        const elementToReplace = document.getElementById(section.id).querySelector(section.selector) || document.getElementById(section.id);
        elementToReplace.innerHTML = this.getSectionInnerHTML(parsedState.sections[section.section], section.selector);

        let quantities = elementToReplace.querySelectorAll('.quantity:not(.buttons_added)');

        if (quantities) {
          quantities.forEach((quantity) => {
            new QuantityInput(quantity);
          });
        }
				if (typeof CartDrawer !== 'undefined') {
				  new CartDrawer();
				}
				if (typeof Cart !== 'undefined') {
			    new Cart().renderContents(parsedState);
			  }
      }));


			if ( document.getElementById('Cart-Drawer') ) {
				this.body.classList.add('open-cc');
	      document.getElementById('Cart-Drawer').classList.add('active');
			}

			let product_drawer = document.getElementById('Product-Drawer');
			if ( product_drawer && product_drawer.contains(this) ) {
				product_drawer.classList.remove('active');

				if ( ! document.getElementById('Cart-Drawer') ) {
					this.body.classList.remove('open-cc');
				}
			}
    }
    getSectionInnerHTML(html, selector = '.shopify-section') {
      return new DOMParser()
        .parseFromString(html, 'text/html')
        .querySelector(selector).innerHTML;
    }
    handleErrorMessage(errorMessage = false) {
      this.errorMessageWrapper = this.errorMessageWrapper || this.querySelector('.product-form__error-message-wrapper');
      this.errorMessage = this.errorMessage || this.errorMessageWrapper.querySelector('.product-form__error-message');

      this.errorMessageWrapper.toggleAttribute('hidden', !errorMessage);

      if (errorMessage) {
        this.errorMessage.textContent = errorMessage;
      }
    }
  });
}

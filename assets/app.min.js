function debounce(fn, wait) {
  let t;
  return (...args) => {
    clearTimeout(t);
    t = setTimeout(() => fn.apply(this, args), wait);
  };
}

/**
 *  @class
 *  @function Quantity
 */
class QuantityInput {
  constructor(self, decreaseText, increaseText) {
    this.input = self.querySelector('.qty');
    this.changeEvent = new Event('change', {
      bubbles: true
    });
    // Create buttons
    this.subtract = self.querySelector('.minus');
    this.add = self.querySelector('.plus');

    // Add functionality to buttons
    this.subtract.addEventListener('click', () => this.change_quantity(-1));
    this.add.addEventListener('click', () => this.change_quantity(1));

    self.classList.add('buttons_added');
  }

  change_quantity(change) {
    // Get current value
    let quantity = Number(this.input.value);

    // Ensure quantity is a valid number
    if (isNaN(quantity)) quantity = 1;

    // Change quantity
    quantity += change;

    // Ensure quantity is always a number
    quantity = Math.max(quantity, 1);

    // Output number
    this.input.value = quantity;

    this.input.dispatchEvent(this.changeEvent);
  }
}
let quantities = document.querySelectorAll('.quantity:not(.buttons_added)');
quantities.forEach((quantity) => {
  new QuantityInput(quantity);
});

/**
 *  @class
 *  @function ArrowSubMenu
 */
class ArrowSubMenu {

  constructor(self) {
    this.submenu = self.parentNode.querySelector('.sub-menu');
		this.arrow = self;
    // Add functionality to buttons
    self.addEventListener('click', (e) => this.toggle_submenu(e));
  }

  toggle_submenu(e) {
    e.preventDefault();
    let submenu = this.submenu;

    if (!submenu.classList.contains('active')) {
      submenu.classList.add('active');

    } else {
      submenu.classList.remove('active');
			this.arrow.blur();
    }
  }
}
let arrows = document.querySelectorAll('.thb-arrow');
arrows.forEach((arrow) => {
  new ArrowSubMenu(arrow);
});

/**
 *  @class
 *  @function ProductGrid
 */
class ProductGrid {

  constructor(self) {
    this.swatches = self.querySelector('.product-card-swatches');
    this.image = self.querySelector('.product-featured-image-link .product-primary-image');
    this.quickview_button = self.querySelector('.product-card-quickview');


    if (this.swatches) {
      this.enableSwatches(this.swatches, this.image);
    }
    if (this.quickview_button) {
      this.enableQuickview(this.quickview_button);
    }
  }

  enableSwatches(swatches, image) {
    let swatch_list = swatches.querySelectorAll('.product-card-swatch'),
      active = swatches.querySelector('.product-card-swatch.active');

    swatch_list.forEach((swatch, index) => {

      swatch.addEventListener('mouseover', function() {

        [].forEach.call(swatch_list, function(el) {
          el.classList.remove('active');
        });
        if (image) {
          image.setAttribute('srcset', swatch.dataset.srcset);
        }

        swatch.classList.add('active');
      });
      swatch.addEventListener('click', function(evt) {
        window.location.href = this.dataset.href;
        evt.preventDefault();
      });
    });
  }
  enableQuickview(quickview_button) {
    const _this = this,
      drawer = document.getElementById('Product-Drawer'),
      body = document.body;

		quickview_button.addEventListener('click', function(evt) {
      evt.preventDefault();
      let productHandle = quickview_button.dataset.productHandle,
        	href = `${theme.routes.root_url}/products/${productHandle}?view=quick-view`;

      // remove double `/` in case shop might have /en or language in URL
      href = href.replace('//', '/');
      if (!href || !productHandle) {
        return;
      }
      if (quickview_button.classList.contains('loading')) {
        return;
      }
      quickview_button.classList.add('loading');
      fetch(href, {
          method: 'GET'
        })
        .then((response) => {
          quickview_button.classList.remove('loading');
          return response.text();
        })
        .then(text => {
          const sectionInnerHTML = new DOMParser()
            .parseFromString(text, 'text/html')
            .querySelector('#Product-Drawer-Content').innerHTML;
          _this.renderQuickview(sectionInnerHTML, drawer, body);

        });
    });
  }
  renderQuickview(sectionInnerHTML, drawer, body) {
    if (sectionInnerHTML) {
      drawer.querySelector('#Product-Drawer-Content').innerHTML = sectionInnerHTML;
      let quantity = drawer.querySelector('.quantity:not(.buttons_added)');
      if (quantity) {
        new QuantityInput(quantity);
      }

      setTimeout(() => {
        new ProductQuickSlider();
        if (Shopify && Shopify.PaymentButton) {
          Shopify.PaymentButton.init();
        }
      }, 300);
      body.classList.add('open-cc');
      drawer.classList.add('active');
			drawer.querySelector('.side-panel-close').focus();
    }
  }
}
let products = document.querySelectorAll('.product-card');
products.forEach((product) => {
  new ProductGrid(product);
});

/**
 *  @class
 *  @function MobileMenu
 */
class MobileMenu {

  constructor() {
		const header = document.getElementById('shopify-section-header'),
					header_main = document.getElementById("header"),
    			menu = document.getElementById('mobile-menu'),
					links = menu.querySelectorAll('.menu-item-has-children'),
				 	toggle = header.querySelector('.mobile-toggle-wrapper'),
					setAnnouncementHeight = this.setAnnouncementHeight;

    links.forEach((link) => {
      let link_container = link.querySelector(':scope > .link-container'),
					link_a = link_container.querySelector('a'),
        	link_span = link_container.querySelector(':scope > span');

      link_span.addEventListener('click', (e) => {
				link.classList.toggle('active');
        e.preventDefault();
      });
			link_a.addEventListener('click', (e) => {
				link.classList.toggle('active');

				if (!link.classList.contains('active')) {
					link_a.blur();
				}
        e.preventDefault();
      });
    });
		let closeAnimation = this.closeAnimation;

    document.addEventListener('keydown', (e) => {

      if (e.code.toUpperCase() === 'ESCAPE') {
        toggle.removeAttribute('open');
      }
    });
		toggle.querySelector('.mobile-toggle').addEventListener('click', (e) => {
			toggle.classList.toggle('active');
			setAnnouncementHeight( header );
			if ( ! toggle.classList.contains('active')) {
				e.preventDefault();
				this.closeAnimation(toggle);
			}
			window.dispatchEvent( new Event('resize.resize-select') );
    });

		// Sticky Header Class
		let observer = new IntersectionObserver(function(entries) {
      if (entries[0].intersectionRatio === 0) {
        header_main.classList.add("is-sticky");
      } else if (entries[0].intersectionRatio === 1) {
        header_main.classList.remove("is-sticky");
      }
    }, {
      threshold: [0, 1]
    });
		if ( document.querySelector(".header--sticky" ) ) {
			observer.observe(document.querySelector(".header--sticky"));
		}


		// Mobile Menu offset
		window.addEventListener('scroll', function() {
			if ( window.innerWidth < 1069 ) {
				setAnnouncementHeight(header);
			}
		});
		window.dispatchEvent( new Event('scroll') );
  }
	setAnnouncementHeight(header) {
		let h = header.getBoundingClientRect().top;
		document.documentElement.style.setProperty('--header-offset', h + 'px');
	}
	closeAnimation(detailsElement) {
    let animationStart;

    const handleAnimation = (time) => {
      if (animationStart === undefined) {
        animationStart = time;
      }

      const elapsedTime = time - animationStart;

      if (elapsedTime < 400) {
        window.requestAnimationFrame(handleAnimation);
      } else {
        detailsElement.removeAttribute('open');
      }
    };

    window.requestAnimationFrame(handleAnimation);
  }
}
/**
 *  @class
 *  @function PanelClose
 */
class PanelClose extends HTMLElement {

  constructor() {
		super();
    let cc = document.querySelector('.click-capture');

    // Add functionality to buttons
    this.addEventListener('click', (e) => this.close_panel(e));
    document.addEventListener('keydown', (e) => {
      if (e.code.toUpperCase() === 'ESCAPE') {
        document.querySelectorAll('.side-panel').forEach((panel) => {
          panel.classList.remove('active');
          document.body.classList.remove('open-cc');
        });
      }
    });
    cc.addEventListener('click', (e) => {
      document.body.classList.remove('open-cc');
			if (document.querySelector('.side-panel.active')) {
	      document.querySelector('.side-panel.active').classList.remove('active');
			}
    });
  }

  close_panel(e) {
    e.preventDefault();
    let panel = e.target.closest('.side-panel');
    panel.classList.remove('active');
    document.body.classList.remove('open-cc');
  }
}
customElements.define('side-panel-close', PanelClose);

/**
 *  @class
 *  @function CartDrawer
 */
class CartDrawer {

  constructor() {
    this.container = document.getElementById('Cart-Drawer');

		if ( ! this.container ) {
			return;
		}
    let _this = this,
				button = document.getElementById('cart-drawer-toggle'),
	      quantities = this.container.querySelectorAll('.quantity input'),
	      removes = this.container.querySelectorAll('.remove');

		if ( ! button ) {
      return;
    }
    // Add functionality to buttons
    button.addEventListener('click', (e) => {
      e.preventDefault();
      document.body.classList.add('open-cc');
      this.container.classList.add('active');
			this.container.focus();
    });


    this.debouncedOnChange = debounce((event) => {
      this.onChange(event);
    }, 300);

    this.container.addEventListener('change', this.debouncedOnChange.bind(this));

		this.notesToggle();
  }
  onChange(event) {
		if ( event.target.classList.contains('qty')) {
			this.updateQuantity(event.target.dataset.index, event.target.value);
		}
		this.removeProductEvent();
  }
	removeProductEvent() {
		let removes = this.container.querySelectorAll('.remove');

		removes.forEach((remove) => {
      remove.addEventListener('click', (event) => {
        this.updateQuantity(event.target.dataset.index, '0');

        event.preventDefault();
      });
    });
  }
  getSectionsToRender() {
    return [{
      id: 'Cart-Drawer',
      section: 'cart-drawer',
      selector: '.cart-drawer'
    },
    {
      id: 'cart-drawer-toggle',
      section: 'cart-bubble',
      selector: '.thb-item-count'
    }];
  }
  getSectionInnerHTML(html, selector) {
    return new DOMParser()
      .parseFromString(html, 'text/html')
      .querySelector(selector).innerHTML;
  }
	notesToggle() {
		let notes_toggle = document.getElementById('order-note-toggle');

		if ( ! notes_toggle ) {
			return;
		}

		notes_toggle.addEventListener('click', (event) => {
			notes_toggle.nextElementSibling.classList.add('active');
		});
		notes_toggle.nextElementSibling.querySelectorAll('.button, .order-note-toggle__content-overlay').forEach((el) => {
			el.addEventListener('click', (event) => {
				notes_toggle.nextElementSibling.classList.remove('active');
				this.saveNotes();
			});
		});
	}
	saveNotes() {
		fetch(`${theme.routes.cart_update_url}.js`, {
      method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'Accept': `application/json`
			},
    	body: JSON.stringify({
        'note': document.getElementById('mini-cart__notes').value
      })
    });
	}
  updateQuantity(line, quantity) {
    this.container.querySelector(`#CartDrawerItem-${line}`).classList.add('thb-loading');
    const body = JSON.stringify({
      line,
      quantity,
      sections: this.getSectionsToRender().map((section) => section.section),
      sections_url: window.location.pathname
    });

    fetch(`${theme.routes.cart_change_url}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': `application/json`
        },
        ...{
          body
        }
      })
      .then((response) => {
        return response.text();
      })
      .then((state) => {
        const parsedState = JSON.parse(state);


        this.getSectionsToRender().forEach((section => {
          const elementToReplace = document.getElementById(section.id).querySelector(section.selector) || document.getElementById(section.id);

          elementToReplace.innerHTML = this.getSectionInnerHTML(parsedState.sections[section.section], section.selector);

          let quantities = elementToReplace.querySelectorAll('.quantity:not(.buttons_added)');
					let removes = this.container.querySelectorAll('.remove');
          if (quantities) {
            quantities.forEach((quantity) => {
              new QuantityInput(quantity);
            });
          }
					if (removes) {
						removes.forEach((remove) => {
				      remove.addEventListener('click', (event) => {
				        this.updateQuantity(event.target.dataset.index, '0');

				        event.preventDefault();
				      });
				    });
					}
					this.notesToggle();

        }));
				if ( this.container.querySelector(`#CartDrawerItem-${line}`).length ) {
	        this.container.querySelector(`#CartDrawerItem-${line}`).classList.remove('thb-loading');
				}
      });
  }
}

/**
 *  @class
 *  @function ModalDialog
 */
class ModalDialog extends HTMLElement {
  constructor() {
    super();
    this.querySelector('[id^="ModalClose-"]').addEventListener(
      'click',
      this.hide.bind(this)
    );
    this.addEventListener('keyup', (event) => {
      if (event.code.toUpperCase() === 'ESCAPE') this.hide();
    });
    if (this.classList.contains('media-modal')) {
      this.addEventListener('pointerup', (event) => {
        if (event.pointerType === 'mouse' && !event.target.closest('product-model')) this.hide();
      });
    } else {
      this.addEventListener('click', (event) => {
        if (event.target.nodeName === 'MODAL-DIALOG') this.hide();
      });
    }
  }

  connectedCallback() {
    if (this.moved) return;
    this.moved = true;
    document.body.appendChild(this);
  }

  show(opener) {
    this.openedBy = opener;
    document.body.classList.add('overflow-hidden');
    this.setAttribute('open', '');
  }

  hide() {
    document.body.classList.remove('overflow-hidden');
    this.removeAttribute('open');
		this.querySelectorAll('.js-youtube').forEach((video) => {
	    video.contentWindow.postMessage('{"event":"command","func":"' + 'pauseVideo' + '","args":""}', '*');
	  });
	  this.querySelectorAll('.js-vimeo').forEach((video) => {
	    video.contentWindow.postMessage('{"method":"pause"}', '*');
	  });
		this.querySelectorAll('video').forEach((video) => video.pause());
  }
}
customElements.define('modal-dialog', ModalDialog);

class ModalOpener extends HTMLElement {
  constructor() {
    super();

    const button = this.querySelector('button');

    if (!button) return;
    button.addEventListener('click', () => {
      const modal = document.querySelector(this.getAttribute('data-modal'));
      if (modal) modal.show(button);
    });
  }
}
customElements.define('modal-opener', ModalOpener);

/**
 *  @class
 *  @function ProductRecommendations
 */
class ProductRecommendations extends HTMLElement {
	constructor() {
		super();

	}
	fetchProducts() {
		fetch(this.dataset.url)
			.then(response => response.text())
			.then(text => {
				const html = document.createElement('div');
				html.innerHTML = text;
				const recommendations = html.querySelector('product-recommendations');

				if (recommendations && recommendations.innerHTML.trim().length) {
					this.innerHTML = recommendations.innerHTML;
				}

				this.classList.add('product-recommendations--loaded');

				let products = this.querySelectorAll('.product-card');
				products.forEach((product) => {
				  new ProductGrid(product);
				});
			})
			.catch(e => {
				console.error(e);
			});
	}
	connectedCallback() {
		this.fetchProducts();
	}
}

customElements.define('product-recommendations', ProductRecommendations);

/**
 *  @class
 *  @function Localization
 */
class Localization {
  constructor() {
		let _this = this;
		// resize on initial load
		document.querySelectorAll(".thb-localization-forms").forEach((localization) => {
			localization.addEventListener("change", (e) => {
				localization.querySelector('form').submit();
			});
		});
	}
}



/**
 *  @class
 *  @function SelectWidth
 */
class SelectWidth {
  constructor() {
		let _this = this;
		// resize on initial load
		document.querySelectorAll(".resize-select").forEach(_this.resizeSelect);

		// delegated listener on change
		document.body.addEventListener("change", (e) => {
	    if (e.target.matches(".resize-select") && e.target.offsetParent !== null) {
	       _this.resizeSelect(e.target);
	    }
		});
		window.addEventListener('resize.resize-select', function() {
			document.querySelectorAll(".resize-select").forEach(_this.resizeSelect);
		});
	}

	resizeSelect(sel) {
	  let tempOption = document.createElement('option');
	  tempOption.textContent = sel.selectedOptions[0].textContent;

	  let tempSelect = document.createElement('select');
	  tempSelect.style.visibility = "hidden";
	  tempSelect.style.position = "fixed";
	  tempSelect.appendChild(tempOption);

	  sel.after(tempSelect);
		if ( tempSelect.clientWidth > 0 ) {
		  sel.style.width = `${+tempSelect.clientWidth + 10}px`;
		}
	  tempSelect.remove();
	}
}

/**
 *  @class
 *  @function ProductQuickSlider
 */
class ProductQuickSlider {
  constructor() {
    this.container = document.getElementById('Product-Quick-Slider');

    if (!this.container) {
      return;
    }

    const flkty = new Flickity(this.container, {
      contain: true,
      cellAlign: 'left',
      pageDots: false,
      freeScroll: true,
      initialIndex: '.is-initial-selected',
      prevNextButtons: false,
      cellSelector: '.product-quick-images__slide'
    });
    let scrollbar = document.querySelector('.product-quick-images__scrollbar>div');
    flkty.on('scroll', function( progress ) {
      progress = Math.max(0, Math.min(1, progress));
      scrollbar.style.transform = 'scaleX(' + progress + ')';
    });

  }
}
if (typeof SelectWidth !== 'undefined') {
	new SelectWidth();
}
window.addEventListener('load', () => {

	if (typeof Localization !== 'undefined') {
		new Localization();
	}
	if (typeof CartDrawer !== 'undefined') {
	  new CartDrawer();
	}
	if (typeof MobileMenu !== 'undefined') {
	  new MobileMenu();
	}

});
